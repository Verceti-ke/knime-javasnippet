<?xml version="1.0" encoding="utf-8"?>
<knimeNode type="Manipulator" icon="./rule_engine_splitter.png" xmlns="http://knime.org/node/v2.8" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://knime.org/node/v2.8 http://knime.org/node/v2.8.xsd">
	<name>Rule-based Row Splitter</name>
	<shortDescription>
		 Splits the input table based on user-defined business rules
	</shortDescription>
	
	<fullDescription>
		<intro>This node takes a list of user-defined rules and tries to match them to each
        row in the input table. Depending on a rule match and settings, the row will be sent to the first or second output table.
        <p>
        The comments start with <tt>//</tt>, and anything after that is not interpreted as a rule in that line.
	 	Rules consist of a condition part (antecedent), which must evaluate to <i>true</i>
        or <i>false</i>, and possibly an outcome (consequent, after the => symbol) that is ignored.
        Each rule is represented by a line.
        The most simple rule is a comparison between a column and another column, a constant number or string.
        </p>
        <p>
        Columns are given by their name surrounded by $, numbers are given in the usual decimal representation. Note that
        strings must not contain (double-)quotes. The flow variables are represented by <b>$${</b>TypeCharacterAndFlowVarName<b>}$$</b>.
        The TypeCharacter should be 'D' for double (real) values, 'I' for integer values and 'S' for strings.
        </p>
        <p>The logical expressions can (and should) be grouped with parentheses because there is no pre-defined
        operator precedence for the logical connectives (NOT, AND, OR, XOR) (comparison operators always take precedence
        over logical connectives).
        All operators are case-sensitive.
        The NOT operator negates all following expressions, not just the direct following expression.
        </p>
        <p>The <tt>ROWID</tt> represents the row key string, the <tt>ROWINDEX</tt> is a the index of the row (first row has <tt>0</tt> value),
        while <tt>ROWCOUNT</tt> stands for the number of rows in the table.</p>
        <p>Some example rules (each should be in one line):</p>
        <pre>
// This is a comment
$Col0$ > 5
</pre>
        When the value in Col0 is greater than 5, it will match.
<pre>
$Col0$ = "Active" AND $Col1$ &lt;= 5
</pre>
        You can combine conditions.
<pre>
$Col0$ LIKE "Market Street*" AND 
    ($Col1$ IN ("married", "divorced") 
        OR $Col2$ > 40) => "Strange"
</pre>
        This way you can combine multiple conditions.
<pre>
$Col0$ CONTAINS $${SFlowVar0}$$ OR $$ROWINDEX$$ &lt; $${IFlowVar1}$$
</pre>
        The flow variables can be used with most operators.
<pre>
"Hello world" CONTAINS "ll+o" => "Always true"
        </pre>
        The regular expression ll+o (at least two ls followed by an o) will always be present in Hello, so this rule will match.
        <p>
        You can use either Ctrl+Space to insert predefined parts, or select them from the upper controls.
        </p>
		</intro>
		
		<option name="Column List">Available columns, which can be used as variables in a rule.</option>
		<option name="Flow Variable List">Available flow variables, which can be used as variables in a rule.</option>
		<option name="Category">The operator categories.</option>
		<option name="Function">A list of valid operators in the selected category.</option>
		<option name="Description">Short help about the operator.</option>
		<option name="Expression">The rule editor. You can complete the expressions with Ctrl+Space. Each row represents a rule. The background of the line signals errors (pink), or comments (yellow). The right side of the editor can show an error icon.</option>
		<option name="any rule matches -> first, others second">The row will be included in the first output if any of the rules matches, the rest go to second.</option>
		<option name="any rule matches -> second, others -> first">The row will be included in the second output if any of the rules matches, the rest go to first.</option>
	</fullDescription>
	
	<ports>
		<inPort index="0" name="To be filtered">Datatable from which to filter rows.</inPort>
		<outPort index="0" name="Filtered">Datatable with rows matching any of the conditions, or matching none if that selected.</outPort>
        <outPort index="1" name="Filtered Out">Datatable with rows not meeting the specified criteria</outPort>
	</ports>
</knimeNode>