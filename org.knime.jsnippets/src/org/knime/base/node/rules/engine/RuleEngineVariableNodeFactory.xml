<?xml version="1.0" encoding="utf-8"?>
<knimeNode type="Manipulator" icon="./rule_engine_variable.png" xmlns="http://knime.org/node/v2.8" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://knime.org/node/v2.8 http://knime.org/node/v2.8.xsd">
	<name>Rule Engine Variable</name>
	<shortDescription>
		 Applies user-defined business rules to the flow variables
	</shortDescription>
	
	<fullDescription>
		<intro>This node takes a list of user-defined rules and tries to match them to the flow variables
        and constants. If a rule matches, its outcome value is returned as a flow variable.
        The first matching rule will provide the outcome.
        <p>
        The comments start with <tt>//</tt>, and anything after that is not interpreted as a rule in that line.
	 	Rules (each in a line) consist of a condition part (antecedent), which must evaluate to <i>true</i>
        or <i>false</i>, and an outcome (consequent, after the => symbol) which is put into the new flow variable if the rule matches.
        Each rule is represented by a line.
        The most simple rule is a comparison between a flow variable and another flow variable, a constant number or string.
        </p>
        <p>The outcome of a rule can either be a constant string, a constant number or a reference to a flow variable value.
        The type of the outcome variable is the common super type of all possible outcomes including the default label.
        </p>
        <p>
        Note that strings must not contain (double-)quotes. The flow variables are represented by <b>$${</b>TypeCharacterAndFlowVarName<b>}$$</b>.
        The TypeCharacter should be 'D' for double (real) values, 'I' for integer values and 'S' for strings.
        </p>
        <p>The logical expressions can (and should) be grouped with parentheses because there is no pre-defined
        operator precedence for the logical connectives (NOT, AND, OR, XOR) (comparison operators always take precedence
        over logical connectives).
        All operators are case-sensitive.
        The NOT operator negates all following expressions, not just the direct following expression.
        </p>
        <p>Some example rules (each should be in one line):</p>
        <pre>
// This is a comment
$${DFlowVar0}$$ > 0 => "Positive"
</pre>
        FlowVar0 has value above zero, which case the result flow variable has the value Positive.
<pre>
$${SFlowVar0}$$ = "Active" AND 
    $${IFlowVar1}$$ &lt;= 5 => "Outlier"
</pre>
        When FlowVar0 is "Active" and FlowVar1 is greater or equal to 5, so the result is Outlier.
<pre>
$${SFlowVar0}$$ LIKE "Market Street*" AND 
    ($${SFlowVar1}$$ IN ("married", "divorced") 
        OR $${IFlowVar2}$$ > 40) => "Strange"
</pre>
        The logical connectives help express complex conditions.
<pre>
$${SFlowVar10}$$ CONTAINS $${SFlowVar0}$$ OR $${DFlowVar2}$$ &lt; $${IFlowVar1}$$ =>
    $${SFlowVar0}$$
</pre>
        You can compare different flow variables.
<pre>
$${IFlowVar0}$$ > 5 => $${SFlowVar1}$$
</pre>
        You can use flow variables in the outcome too.
<pre>
"Hello world" CONTAINS "ll+o" => "Always true"
        </pre>
        The regular expression ll+o (at least two ls followed by an o) will always be present in Hello, so this rule will match.
        <p>
        You can use either Ctrl+Space to insert predefined parts, or select them from the upper controls.
        </p>
		</intro>
		
		<option name="Flow Variable List">Available flow variables, which can be used as variables in a rule.</option>
		<option name="Category">The operator categories.</option>
		<option name="Function">A list of valid operators in the selected category.</option>
		<option name="Description">Short help about the operator.</option>
		<option name="Expression">The rule editor. You can complete the expressions with Ctrl+Space. Each row represents a rule. The background of the line signals errors (pink), or comments (yellow). The right side of the editor can show an error icon.</option>
		<option name="New flow variable name">Name of the new flow variable, 
		  which contains the outcome of the rules.</option>
		<option name="Default label">This label is used if no rule matches.</option>
		<option name="is plain text">The default label is used as is.</option>
		<option name="is a flow variable">The default value comes from the selected flow variable.</option>
	</fullDescription>
	
	<ports>
		<inPort index="0" name="Input variables (optional)">Input variables (optional)</inPort>
		<outPort index="0" name="Output variables">Output variables.</outPort>
	</ports>
</knimeNode>