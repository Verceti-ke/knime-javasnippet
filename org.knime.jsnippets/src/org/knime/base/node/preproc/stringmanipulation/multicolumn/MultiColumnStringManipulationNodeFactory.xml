<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE knimeNode PUBLIC "-//UNIKN//DTD KNIME Node 2.0//EN" "http://www.knime.org/Node.dtd">
<knimeNode icon="string_manipulation_multi_column.png" type="Manipulator">
  <name>String Manipulation (Multi Column)</name>
  
  <shortDescription>
    Apply string transformations to several columns at once. The results can either replace the values in the respective source columns or be appended into a new columns.  
  </shortDescription>
  
  <fullDescription>
    <intro>
      <p>
        The String Manipulation (Multi Column) node is an extension of the String Manipulation node, applying the provided
        expression to every selected column in turn.  Like the String Manipulation node, a new value is computed based on an
        expression involving string functions and column references.  To cover cases where the same rule has to be applied
        to multiple columns, this node evaluates the provided expression for each column in a selection of columns in turn. 
        The computed results can be either appended as new columns or be used to replace the selected input columns.  The
        dialog shows available functions and provides them via autocomplete.
      </p>
      <p>
        In each iteration, one column name from the selection will be used as replacement for the
        <tt>$$CURRENTCOLUMN$$</tt> placeholder in the expression. For instance, when selecting columns
        <tt>first_name</tt> and <tt>last_name</tt>, the expression <tt>capitalize($$CURRENTCOLUMN$$)</tt> would
        first evaluate <tt>capitalize($first_name$)</tt> and then <tt>capitalize($last_name$)</tt>. Depending on the node
        configuration, the results are appended as new columns or used to replace the input values. 
      </p>
      <h3>Examples</h3>
      <h4>Convert Strings to Missing Values</h4>
      <p>
 		<tt>toNull(replace($$CURRENTCOLUMN$$, "N.A.", ""))</tt> searches for "N.A." in all selected
        columns, replaces them with "" and returns a missing value, if the resulting string is empty  (<tt>toNull</tt>
        converts empty strings to a missing value).  For multiple strings to replace, a regular expression separating the
        target strings with <tt>|</tt> can be used: <tt>regexReplace($$CURRENTCOLUMN$$, "N.A.|-", "")</tt>. This
        replaces both occurrences of "N.A." and "-" with empty strings. 
      </p>
	  <h4>Convert Strings to Integers</h4>
      <p>
        <tt>toInt(replace(replace($$CURRENTCOLUMN$$, "No", "0"), "Yes", "1"))</tt> first transforms all instances of
        "No" to "0" and all instances of "Yes" to "1". <tt>toInt</tt> then transforms the string "0" to the number 0 and
        the string "1" to the number 1. For instance, when selecting the first three columns to loop over and appending the
        results with the suffix " Binary", we could create the following output table. 
      </p>
      <table>
        <tr>
          <th>Responsible</th>
          <th>Successful</th>
          <th>Fast</th>
          <th>Responsible Binary</th>
          <th>Successful Binary</th>
          <th>Fast Binary</th>
        </tr>
        <tr>
          <td>Yes</td>
          <td>No</td>
          <td>Yes</td>
          <td>1</td>
          <td>0</td>
          <td>1</td>
        </tr>
        <tr>
          <td>No</td>
          <td>Yes</td>
          <td>No</td>
          <td>0</td>
          <td>1</td>
          <td>0</td>
        </tr>
      </table>
	  <h4>Use Columns or Flow Variables to Control String Manipulation</h4>
      <p>You can use the value of an integer column to control integer parameters of a string manipulator:
        <tt>substr($$CURRENTCOLUMN$$, $Start Position$)</tt> extracts the substring of <tt>$$CURRENTCOLUMN$$</tt>
        that starts at offset <i>k</i>, where <i>k</i> is the integer value in the column <tt>Start Position</tt> in the
        current row. For example, when the selected column is <tt>Customer</tt> and the results are appended as
        <tt>Customer Name Only</tt>, the expression <tt>substr($$CURRENTCOLUMN$$, $Start Position$)</tt> could be
        used to generate the following ouput:
      </p>
      <table>
        <tr>
          <th>Customer</th>
          <th>Start Position</th>
          <th>Customer Name Only</th>
        </tr>
        <tr>
          <td>Mr. Jones</td>
          <td>3</td>
          <td>Jones</td>
        </tr>
        <tr>
          <td>Prof. Desmond</td>
          <td>5</td>
          <td>Desmond</td>
        </tr>
      </table>
      <p>Flow variables can also be used to control the parameter of a string manipulation function. For instance, if there
        is an integer flow variable <tt>start-position</tt> available, the above example could be rewritten as 
        <tt>substr($$CURRENTCOLUMN$$, $${Istart-position}$$). </tt>
      </p>

      </intro>
      <tab name="String Manipulation">
        <option name="Column Filter">
          The columns that the node should loop over. These columns can be <i>dynamically</i> referenced in the expression
          using <tt>$$CURRENTCOLUMN$$</tt>. Dynamically referenced means that <tt>$$CURRENTCOLUMN$$</tt> refers to
          different columns, depending on the columns that are selected in the column filter. It is allowed to include
          non-string columns from the column filter, but their values will be converted to string before substituting them for
          <tt>$$CURRENTCOLUMN$$</tt>. 
        </option>
        <option name="Column List">Available columns in the input data table. They can be <i>statically</i> referenced in an
        expression, meaning that they always refer to the same column in the input table, no matter which columns are selected
        to loop over. For instance, the column <tt>age</tt> can be referenced as <tt>$age$</tt>. Values will
        <b>not</b> automatically be converted to string. If necessary, convert to string, e.g., <tt>string($age$)</tt>. 
        </option>
        <option name="Flow Variable List">Available flow variables, which can be used as variables in the expression. 
        Like statically referenced columns, their values are <b>not</b> automatically converted to string. This makes it
        easier to use them to control non-string parameters of string manipulation functions, like in the substring example
        above. </option>
        <option name="Category">The string function categories.</option>
        <option name="Function">List of string functions in the selected category.</option>
        <option name="Description">Description and example for the selected function.</option>
        <option name="Expression">The expression editor.</option>
        <option name="Append Selected Columns with Suffix">If selected, the computed values columns will be appended as new columns, 
          using the original column name with the specified suffix.</option>
        <option name="Replace Selected Columns">
          If selected, the computed values will replace the values in the columns that were selected to loop over.</option>
        <option name="Insert missing values as null">
          When any of the referenced columns (statically or dynamically, see above) contain missing values, the expression
          can either be evaluated with the missing values set to <tt>null</tt> or be skipped entirely, simply returning
          a missing value for the output.</option>
        <option name="Fail if expression can not be evaluated">
            Whether to stop node execution when an expression can not be evaluated.  This could be the case if an input column
            contains values that the expression can not handle (e.g., <tt>toInt()</tt> on a column that contains "1", "2", "zebra",
            "4", "5" would fail on the third row). The default behavior is to stop execution, but disabling this option will output missing
            values instead. </option>
      </tab>
    </fullDescription>

    <ports>
      <inPort index="0" name="Input data">Input data with multiple columns to proces.</inPort>
      <outPort index="0" name="Output data">Input data with replaced or appended columns.</outPort>
    </ports>  
</knimeNode>
