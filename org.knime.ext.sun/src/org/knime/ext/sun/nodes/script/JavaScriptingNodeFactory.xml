<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE knimeNode PUBLIC "-//UNIKN//DTD KNIME Node 1.0//EN" "http://www.knime.org/Node.dtd">
<knimeNode icon="./javascripting.png" type="Manipulator">
    <name>Java Snippet</name>
    <shortDescription>Calculates a new column based on java code snippets.</shortDescription>
    <fullDescription>
        <intro>
	        <p>
				This node allows you to execute arbitrary java code to create
				a new column or to replace an existing one. Enter the java code in 
				the text area. To address certain input values of the table 
				use <code>$name_of_col$</code>. For instance, the sum of the first two 
				columns is <code>$col_1$ + $col_2$</code> (replace col_1 and col_2 by the 
				name of the columns). Please also specify the return type with one 
				of the radio buttons. The final value will be the result of your
		        last statement (<b>after</b> last ';'). You can also use more complex 
		        statements such as <i>if-else</i> switches. For instance, to bin a numeric
		        column you could enter code as follows and check the String return type:
	        </p>
<pre>
  String bin;
  if ($col_1$ &lt; 0.5) {
    bin  = "Very small";
  } else if ($col_1$ &lt; 2.0) {
    bin  = "Small";
  } else if ($col_1$ &lt; 10.0) {
    bin  = "Medium";
  } else if ($col_1$ &lt; 20) {
    bin  = "Large";
  } else {
    bin  = "Very Large";
  };
  bin 
</pre>
             <p>
               It is advisable to use a designated return variable (<code>bin</code> in the example) that
               gets assigned the actual return value. Note also that the last closing '}' character is followed
               by an explicit ';'!
             </p>
		     <p>
		        You can also use static methods of java utility classes, e.g. to get a 
		        column with random values, simply enter <code>Math.random()</code> and 
		        check the double return type.
	        </p>
		</intro>
		<option name="Text Area">
		  Enter your java code here (the entire source will be wrapped in a 
		  method), do not add the <b>return</b> keyword though but only the
		  statement that succeeds <b>return</b>. If you use more complex code, 
		  for instance loops, enter a (potentially unnecessary) '<b>;</b>' 
		  right before the return statement. You can add the name of a column 
		  by clicking its name in the left list. Note that numeric 
		  (double-compatible) columns will be handled as generic <code>double</code>,
		  int-compatible columns as <code>int</code> and any other column type as 
		  <code>String</code>.
		</option>
		<option name="Return type">
		  Specify here the resulting type of your code snippet. Unfortunately
		  KNIME cannot determine what will be the correct return type - so you 
		  need to assist here.
		</option>
		<option name="Replace/Append">
		  Specify here if you want the result to be put into a separate or 
		  existing column.
		</option>
	</fullDescription>
    <ports>
        <dataIn name="Any input table" index="0">Input table.</dataIn>
        <dataOut name="Appended table" index="0">Input table with an additional calculated column
	        or one column replaced.
        </dataOut>
	</ports>
</knimeNode>
